// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package models

import (
	"context"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
insert into transaction (name, cost, time)
values($1, $2, $3)
returning id, name, cost, time
`

type CreateTransactionParams struct {
	Name string
	Cost float64
	Time time.Time
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.Name, arg.Cost, arg.Time)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Time,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
delete
from transaction
where id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTransaction = `-- name: GetTransaction :one
select id, name, cost, time
from transaction
where id = $1
limit 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Time,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
select id, name, cost, time
from transaction
order by name
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cost,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const partialUpdateTransaction = `-- name: PartialUpdateTransaction :one
update transaction
set name = case when $1::boolean then $2::VARCHAR(255) else name end,
    cost = case when $3::boolean then $4::real else cost end,
    time = case when $5::boolean then $6::timestamp else time end
where id = $7
returning id, name, cost, time
`

type PartialUpdateTransactionParams struct {
	UpdateName bool
	Name       string
	UpdateCost bool
	Cost       float32
	UpdateTime bool
	Time       time.Time
	ID         int64
}

func (q *Queries) PartialUpdateTransaction(ctx context.Context, arg PartialUpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, partialUpdateTransaction,
		arg.UpdateName,
		arg.Name,
		arg.UpdateCost,
		arg.Cost,
		arg.UpdateTime,
		arg.Time,
		arg.ID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Time,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
update transaction
set name = $2,
    cost = $3,
    time = $4
where id = $1
returning id, name, cost, time
`

type UpdateTransactionParams struct {
	ID   int64
	Name string
	Cost float64
	Time time.Time
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.ID,
		arg.Name,
		arg.Cost,
		arg.Time,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Time,
	)
	return i, err
}
